extends Node2D
class_name DeckMaster

# Signal emitted when the scene catches the signal from Story Card. Should be
# caught by Game, which will then destroy this object.
signal done(owner)

# signal emitted when card is hidden
signal card_hidden(owner)

# Stores all employees present in the game
var employees

# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

# Return a filled out card generated by the Card Generator
func get_card() -> StoryCard:
	var card_dto:CardDTO = $CardGenerator.generate_card()
	var card: StoryCard = preload("res://card/story_card.tscn").instantiate()

	var chosen_employees = choose_employees(
		card_dto.employee_number,
		card_dto.employee_filter
	)
	var i = 1
	var format = []
	var reference = {}
	for emp in chosen_employees:
		var base = "${E"+str(i)+"}"
		format.append([base+".name",emp.name])
		reference[base]=emp
		i+=1
	card_dto.fill_card(card,format,reference)
	# fill_employees(card, chosen_employees)

	card.update_view()
	add_child(card)
	card.done.connect(_on_card_done)
	card.hidden.connect(_on_card_hidden)
	card.visible = false
	return card
	
# Pick random employees that will take part in the story
func choose_employees(number: int, filter) -> Array:
	var possible_e = possible_employees(filter)
	possible_e.shuffle()
	var chosen_employees =  possible_e.slice(0, number)
	return chosen_employees
	
# Return an array of employees that can take part in the story
# The conditions may be defined in the JSON file.
# TO BE IMPLEMENTED
func possible_employees(filter) -> Array:
	return employees.duplicate()

func _on_card_done(owner):
	emit_signal("done", self)
	owner.queue_free()
	
func _on_card_hidden():
	card_hidden.emit(self)
	
func has_card() -> bool:
	return get_child_count() > 1

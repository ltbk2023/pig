extends Node2D
class_name DeckMaster

# Signal emitted when the scene catches the signal from Story Card. Should be
# caught by Game, which will then destroy this object.
signal done(owner)

# signal emitted when card is hidden
signal card_hidden(owner)

# Stores all employees present in the game
var employees = null

# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

# Return a filled out card generated by the Card Generator
func get_card(turn: int) -> StoryCard:
	var card_dto:CardDTO
	var chosen_employees
	while (true):
		card_dto = $CardGenerator.generate_card(turn)
		if card_dto == null:
			return null
		chosen_employees = choose_employees(
			card_dto.employee_number,
			card_dto.employee_filter
		)
		if chosen_employees.size() == card_dto.employee_number:
			break
	
	var card: StoryCard = preload("res://card/story_card.tscn").instantiate()
	var i = 1
	var format = []
	var reference = {}
	for emp in chosen_employees:
		var base = "${E"+str(i)+"}"
		format.append([base+".name",emp.name])
		reference[base]=emp
		i+=1
	card_dto.fill_card(card,format,reference)
	# fill_employees(card, chosen_employees)

	card.update_view()
	add_child(card)
	card.visible = false
	card.done.connect(_on_card_done)
	card.hidden.connect(_on_card_hidden)
	return card
	
# Pick random employees that will take part in the story
# The conditions may be defined in the JSON file.
# Right now chosing by filter is simple, so I would recommend
# That the first employee (E1) has rarer filter
func choose_employees(number: int, filters) -> Array:
	var possible_e = possible_employees()
	var chosen_employees = []
	if number > possible_e.size():
		return []
	for filter in filters:
		var index = -1
		for i in range(number):
			if check_filters(possible_e[i].filter, filter):
				index = i
		if index == -1:
			return []
		number -= 1
		chosen_employees.append(possible_e.pop_at(index))
	return chosen_employees

# check if every elemet of card filter is included in employee_filter
func check_filters(emp_filter, card_filter):
	for filter in card_filter:
		if not emp_filter.has(filter):
			return false
	return true
	
# Return an array of employees that can take part in the story
func possible_employees() -> Array:
	var emp = employees.duplicate()
	emp.shuffle()
	return emp

func _on_card_done(owner):
	emit_signal("done", self)
	owner.queue_free()
	
func _on_card_hidden():
	card_hidden.emit(self)
	
func has_card() -> bool:
	return get_child_count() > 1
